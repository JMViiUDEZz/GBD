--EJ 1

CREATE TABLE V_CLIENTES (
DNI VARCHAR2(9) PRIMARY KEY,
Nombre VARCHAR2(40) NOT NULL
)
CREATE TABLE V_NUMEROS (
Numero VARCHAR2(9) PRIMARY KEY,
DNI_Cliente VARCHAR2(9) NOT NULL,
Puntos NUMBER(9,2) DEFAULT 0,
FOREIGN  KEY(DNI_Cliente) REFERENCES V_CLIENTES(DNI) ON DELETE CASCADE 
)
CREATE TABLE V_CONSUMOS (
Numero VARCHAR2(9),
Instante TIMESTAMP NOT NULL,
Duracion NUMBER(5,2) NOT NULL,
PRIMARY KEY(Numero,Instante),
FOREIGN  KEY(Numero) REFERENCES V_NUMEROS(Numero) ON DELETE CASCADE 
)

CREATE OR REPLACE PROCEDURE VADOFONE
AS
 CURSOR CONSUMOS IS SELECT NUMERO,SUM(DURACION) AS TOTAL FROM V_CONSUMOS GROUP BY NUMERO;
 CURSOR PREMIADOS IS SELECT * FROM V_NUMEROS N INNER JOIN V_CLIENTES C ON N.DNI_CLIENTE=C.DNI ORDER BY PUNTOS DESC;
 FILA_PREMIADOS PREMIADOS%ROWTYPE;
BEGIN
 FOR F IN CONSUMOS LOOP
  UPDATE V_NUMEROS SET PUNTOS=F.TOTAL WHERE NUMERO=F.NUMERO;
  COMMIT;
 END LOOP;
 OPEN PREMIADOS;
 LOOP
  FETCH PREMIADOS INTO FILA_PREMIADOS;
  DBMS_OUTPUT.PUT_LINE(FILA_PREMIADOS.DNI||' '||FILA_PREMIADOS.NOMBRE||' '||
  FILA_PREMIADOS.NUMERO||' '||FILA_PREMIADOS.PUNTOS);
 EXIT WHEN PREMIADOS%NOTFOUND OR PREMIADOS%ROWCOUNT>2;
 END LOOP;
 CLOSE PREMIADOS;
END;

EXECUTE VADOFONE;

--EJ2 OPOSICIONES

CREATE TABLE OPOSITORES(
    DNI VARCHAR2(9) PRIMARY KEY,
    APELLIDOS VARCHAR2(40) NOT NULL,
    NOMBRE VARCHAR2(25) NOT NULL,
    N_OPOSITOR NUMBER(3) DEFAULT NULL
)

INSERT INTO OPOSITORES VALUES ('111111122','PEREZ ALVAREZ','JOSE MARIA',NULL)

SELECT * FROM OPOSITORES WHERE APELLIDOS>='H' ORDER BY APELLIDOS,NOMBRE;
SELECT * FROM OPOSITORES WHERE APELLIDOS<'H' ORDER BY APELLIDOS,NOMBRE;


--CUANDO TENEMOS QUE TRATAR TODAS LAS FILAS DE LA 
TABLA SE PODRÁ UTILIZAR EL BUCLE FOR DEL CURSOR
NO LO UTILIZAREMOS CUANDO NOS PIDAN TRATAR POR EJEMPLO,
LAS 5 PRIMERAS FILAS().

CREATE OR REPLACE PROCEDURE ASIGNAR_NUMERO_OPOSITOR(LETRA CHAR)
AS
 CURSOR C1 IS SELECT ROWID FROM OPOSITORES WHERE APELLIDOS>=LETRA ORDER BY APELLIDOS,NOMBRE;
 CURSOR C2 IS SELECT ROWID FROM OPOSITORES WHERE APELLIDOS<LETRA ORDER BY APELLIDOS,NOMBRE;
 NUMERO NUMBER(4) DEFAULT 1;
BEGIN
 FOR FC1 IN C1 LOOP
  UPDATE OPOSITORES SET N_OPOSITOR=NUMERO WHERE ROWID=FC1.ROWID;
  NUMERO:=NUMERO+1;
  COMMIT;
 END LOOP;
 FOR FC2 IN C2 LOOP
  UPDATE OPOSITORES SET N_OPOSITOR=NUMERO WHERE ROWID=FC2.ROWID;
  NUMERO:=NUMERO+1;
  COMMIT;
 END LOOP;
END;

EXECUTE ASIGNAR_NUMERO_OPOSITOR('H');

SELECT * FROM OPOSITORES ORDER BY APELLIDOS,NOMBRE;

--EJ 3 ANTIGUEDAD

--EN ESTE CASO, AL ATENDER A LOS 2 EMPRESARIOS CON MAS ANTIGUEDAD,
NO PODREMOS UTILIZAR EL BUCLE FOR PARA EL CURSOR

--MIO (NO ESTÁ BIEN DEL TODO)
CREATE OR REPLACE PROCEDURE SUBIDA_SALARIO_EMPLE(ND EMPLE.DEPT_NO%TYPE)
AS
 CURSOR C IS SELECT ROWID,DEPT_NO,SALARIO FROM EMPLE WHERE DEPT_NO=ND ORDER BY FECHA_ALT;
 SUBIDA NUMBER(8,2);
 F C%ROWTYPE;
BEGIN
 OPEN C;
 LOOP
 FETCH C INTO F;
 EXIT WHEN C%NOTFOUND OR C%ROWCOUNT>2;
  SUBIDA:=F.SALARIO*15/100;
  IF F.SALARIO<3000 THEN
   UPDATE EMPLE SET SALARIO=SALARIO+SUBIDA WHERE ROWID=F.ROWID;
  END IF;
  END LOOP;
 CLOSE C;
END;

EXECUTE SUBIDA_SALARIO_EMPLE(30);

SELECT * FROM EMPLE WHERE DEPT_NO=30 ORDER BY FECHA_ALT

--PROFESOR GINES (ES LA SOLUCION CORRECTA)
CREATE OR REPLACE PROCEDURE GRATIFICAR_MAS_ANTIGUOS(COD_DEP EMPLE.DEPT_NO%TYPE)
AS
 CURSOR C IS SELECT ROWID,SALARIO FROM EMPLE WHERE DEPT_NO=COD_DEP ORDER BY FECHA_ALT;
 SUBIDA NUMBER(6,2);
 F C%ROWTYPE;
BEGIN
 OPEN C;
 LOOP
 FETCH C INTO F;
 EXIT WHEN C%NOTFOUND OR C%ROWCOUNT>2;
  SUBIDA:=F.SALARIO*15/100;
  IF F.SALARIO+SUBIDA<=3000 THEN
   UPDATE EMPLE SET SALARIO=SALARIO+SUBIDA WHERE ROWID=F.ROWID;
  ELSE
   IF F.SALARIO<3000 THEN
   UPDATE EMPLE SET SALARIO=3000 WHERE ROWID=F.ROWID;
   END IF;
  END IF;
   COMMIT;
  END LOOP;
 CLOSE C;
END;

EXECUTE GRATIFICAR_MAS_ANTIGUOS(30);

SELECT * FROM EMPLE WHERE DEPT_NO=30 ORDER BY FECHA_ALT

--EJ 4

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PRECIO_PRODUCTOS_FAMILIA(
FAM JPRODUCTOS.GAMA%TYPE, PCT NUMBER, PMAX NUMBER)
AS
CURSOR PRODUCTOS IS SELECT ROWID,PRECIOVENTA FROM JPRODUCTOS WHERE GAMA=FAM;
SUBIDA NUMBER(8,2);
NUM_FILAS NUMBER(10);
BEGIN
 FOR FILA_PRODUCTOS IN PRODUCTOS LOOP
  SUBIDA:=FILA_PRODUCTOS.PRECIOVENTA*PCT/100;
  IF FILA_PRODUCTOS.PRECIOVENTA+SUBIDA<=PMAX THEN
   UPDATE JPRODUCTOS SET PRECIOVENTA=PRECIOVENTA+SUBIDA WHERE ROWID=FILA_PRODUCTOS.ROWID;
   ELSE
   UPDATE JPRODUCTOS SET PRECIOVENTA=PMAX WHERE ROWID=FILA_PRODUCTOS.ROWID; 
  END IF;
  COMMIT;
  NUM_FILAS:=PRODUCTOS%ROWCOUNT;
 END LOOP;
 DBMS_OUTPUT.PUT_LINE('SE HA ACTUALIZADO EL PRECIO A '||NUM_FILAS||' PRODUCTOS');
END;

EXECUTE ACTUALIZAR_PRECIO_PRODUCTOS_FAMILIA('Frutales',5,300);





